{"version":3,"file":"static/js/794.cc9519ed-5041e.chunk.js","mappings":"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","sources":["components/ExpiryNotification/ExpiryNotifyDropdown.js","components/Address/RenewAll.js"],"sourcesContent":["import React, { createRef, useState } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport styled from '@emotion/styled'\nimport { CalendarButton } from '../Calendar/Calendar'\nimport Dropdown from '../Calendar/Dropdown'\nimport EmailNotifyLink from './EmailNotifyLink'\nimport Modal from '../Modal/Modal'\nimport ExpiryNotificationModal from './ExpiryNotificationModal'\nimport { useOnClickOutside } from 'components/hooks'\n\nconst ExpiryNotifyDropdownContainer = styled('div')`\n  position: relative;\n`\n\nexport default function ExpiryNotifyDropdown({ address }) {\n  const dropdownRef = createRef()\n  const togglerRef = createRef()\n  const [showDropdown, setShowDropdown] = useState(false)\n  const [showModal, setShowModal] = useState(false)\n  const { t } = useTranslation()\n\n  useOnClickOutside([dropdownRef, togglerRef], () => setShowDropdown(false))\n\n  const handleDropdownClick = () => {\n    setShowDropdown(value => !value)\n  }\n\n  const handleEmailNotifyClick = () => {\n    setShowModal(true)\n    setShowDropdown(false)\n  }\n\n  const handleCloseModal = () => {\n    setShowModal(false)\n  }\n\n  return (\n    <ExpiryNotifyDropdownContainer style={{ display: 'none' }}>\n      <CalendarButton ref={togglerRef} onClick={handleDropdownClick}>\n        {t('expiryNotification.reminder')}\n      </CalendarButton>\n      {showDropdown && (\n        <Dropdown ref={dropdownRef}>\n          <EmailNotifyLink\n            onClick={handleEmailNotifyClick}\n            key=\"email\"\n            address={address}\n          >\n            {t('c.email')}\n          </EmailNotifyLink>\n        </Dropdown>\n      )}\n      {showModal && (\n        <Modal closeModal={handleCloseModal}>\n          <ExpiryNotificationModal\n            {...{ address, onCancel: handleCloseModal }}\n          />\n        </Modal>\n      )}\n    </ExpiryNotifyDropdownContainer>\n  )\n}\n","import React, { useState } from 'react'\nimport { useMutation, useQuery } from '@apollo/client'\nimport { motion, AnimatePresence } from 'framer-motion'\nimport styled from '@emotion/styled/macro'\nimport { useTranslation } from 'react-i18next'\nimport EthVal from 'ethval'\nimport mq from 'mediaQuery'\n\nimport { RENEW_DOMAINS } from '../../graphql/mutations'\nimport { GET_RENT_PRICES, GET_ETH_PRICE } from 'graphql/queries'\nimport { calculateDuration } from 'utils/dates'\nimport { useEditable } from '../hooks'\nimport { trackReferral } from '../../utils/analytics'\nimport { refetchTilUpdated } from '../../utils/graphql'\n\nimport PendingTx from '../PendingTx'\nimport DefaultButton from '../Forms/Button'\nimport SaveCancel from '../SingleName/SaveCancel'\nimport { PricerAll as PriceAllDefault } from '../SingleName/Pricer'\nimport ExpiryNotifyDropdown from '../ExpiryNotification/ExpiryNotifyDropdown'\n\nconst ActionsContainer = styled('div')`\n  align-items: start;\n  display: flex;\n  flex-direction: column;\n  grid-area: actions;\n  justify-content: flex-start;\n  > * {\n    margin: 10px 0 10px 0;\n  }\n  ${mq.small`\n    align-items: center; \n    flex-direction: row;\n    > * { \n      margin: 0 0 0 20px;\n    }\n  `}\n  ${mq.large`\n    justify-content: flex-end;\n  `}\n`\n\nconst RenewContainer = styled('div')`\n  grid-area: renew;\n  display: flex;\n  flex-direction: column;\n`\n\nconst RenewSelected = styled(DefaultButton)`\n  margin-right: 20px;\n  align-self: flex-start;\n`\n\nconst RenewPricer = styled(motion.div)`\n  background: #f0f6fa;\n  padding: 20px;\n  margin: 20px;\n  margin-left: 0;\n  display: flex;\n  flex-direction: column;\n`\n\nconst Buttons = styled('div')`\n  display: flex;\n  justify-content: flex-end;\n  align-items: flex-start;\n`\n\nconst StyledPricer = styled(PriceAllDefault)``\n\nconst PricerAll = motion.custom(StyledPricer)\n\nconst ConfirmationList = styled('div')`\n  max-height: 500px;\n  overflow-y: scroll;\n`\n\nconst WarningMessage = styled('span')`\n  color: #f6412d;\n  margin-right: auto;\n  margin-bottom: 1em;\n  ${mq.small`\n    margin-bottom: 0em;\n  `}\n`\n\nfunction isValid(selectedNames) {\n  return selectedNames.length > 0\n}\n\nexport default function Renew({\n  selectedNames,\n  address,\n  allNames,\n  setCheckedBoxes,\n  setSelectAll,\n  refetch,\n  data,\n  getterString,\n  checkedOtherOwner\n}) {\n  let { t } = useTranslation()\n  const { state, actions } = useEditable()\n  const { editing, txHash, pending, confirmed } = state\n\n  const { startEditing, stopEditing, startPending, setConfirmed } = actions\n\n  const [years, setYears] = useState(1)\n  const {\n    data: { getEthPrice: ethUsdPrice } = {},\n    loading: ethUsdPriceLoading\n  } = useQuery(GET_ETH_PRICE)\n  const duration = calculateDuration(years)\n  let labelsToRenew = selectedNames.map(name => name.split('.')[0])\n\n  const { data: { getRentPrices } = {}, loading: loadingRentPrices } = useQuery(\n    GET_RENT_PRICES,\n    {\n      variables: {\n        labels: labelsToRenew,\n        duration\n      }\n    }\n  )\n\n  const [mutation] = useMutation(RENEW_DOMAINS, {\n    onCompleted: res => {\n      const txHash = Object.values(res)[0]\n      startPending(txHash)\n      if (getRentPrices && txHash && ethUsdPrice) {\n        trackReferral({\n          labels: labelsToRenew, // labels array\n          transactionId: txHash, //hash\n          type: 'renew', // renew/register\n          price: new EthVal(`${getRentPrices._hex}`)\n            .toEth()\n            .mul(ethUsdPrice)\n            .toFixed(2), // in wei\n          years\n        })\n      }\n    }\n  })\n\n  return (\n    <>\n      <ActionsContainer>\n        {!editing ? (\n          pending && !confirmed ? (\n            <PendingTx\n              txHash={txHash}\n              onConfirmed={() => {\n                setConfirmed()\n                refetchTilUpdated(\n                  refetch,\n                  300,\n                  'expiryDate',\n                  selectedNames[0],\n                  data,\n                  getterString\n                )\n                setCheckedBoxes({})\n                setSelectAll(false)\n              }}\n            />\n          ) : (\n            <>\n              {address && allNames.length > 0 ? (\n                <ExpiryNotifyDropdown address={address} />\n              ) : (\n                ''\n              )}\n              <RenewSelected\n                onClick={() => {\n                  if (labelsToRenew.length > 0) startEditing()\n                }}\n                type={labelsToRenew.length > 0 ? 'primary' : 'disabled'}\n              >\n                {t('address.renew.button')}\n              </RenewSelected>\n            </>\n          )\n        ) : null}\n      </ActionsContainer>\n\n      <RenewContainer>\n        {editing && (\n          <AnimatePresence>\n            <RenewPricer\n              initial={{ opacity: 0, height: 0 }}\n              animate={{ opacity: 1, height: 'auto' }}\n              exit={{ opacity: 0, height: 0 }}\n            >\n              <PricerAll\n                initial={{ opacity: 0, height: 0 }}\n                animate={{ opacity: 1, height: 'auto' }}\n                exit={{ opacity: 0, height: 0 }}\n                labels={labelsToRenew}\n                years={years}\n                loading={loadingRentPrices}\n                price={getRentPrices}\n                setYears={setYears}\n                duration={duration}\n                ethUsdPriceLoading={ethUsdPriceLoading}\n                ethUsdPrice={ethUsdPrice || 0}\n              />\n              <Buttons>\n                {checkedOtherOwner && (\n                  <WarningMessage>\n                    *{t('singleName.expiry.cannotown')}\n                  </WarningMessage>\n                )}\n                <SaveCancel\n                  stopEditing={stopEditing}\n                  mutation={() => {\n                    let variables = {\n                      labels: labelsToRenew,\n                      duration\n                    }\n\n                    mutation({\n                      variables\n                    })\n                  }}\n                  mutationButton={t('address.renew.confirmButton')}\n                  confirm={true}\n                  isValid={isValid(selectedNames)}\n                  extraDataComponent={\n                    <ConfirmationList>\n                      {t('address.renew.confirm.0')}\n                      {'\\n'}\n                      <ul>\n                        {selectedNames.map(name => (\n                          <li>{name}</li>\n                        ))}\n                      </ul>\n                      {t('address.renew.confirm.1')}\n                      {t('address.renew.year', { count: years })}\n                    </ConfirmationList>\n                  }\n                />\n              </Buttons>\n            </RenewPricer>\n          </AnimatePresence>\n        )}\n      </RenewContainer>\n    </>\n  )\n}\n"],"names":["ExpiryNotifyDropdownContainer","styled","ExpiryNotifyDropdown","address","dropdownRef","createRef","togglerRef","useState","showDropdown","setShowDropdown","showModal","setShowModal","t","useTranslation","useOnClickOutside","handleCloseModal","style","display","Calendar","ref","onClick","value","Dropdown","EmailNotifyLink","Modal","closeModal","ExpiryNotificationModal","onCancel","ActionsContainer","mq","RenewContainer","RenewSelected","DefaultButton","RenewPricer","motion","Buttons","StyledPricer","PriceAllDefault","PricerAll","ConfirmationList","WarningMessage","isValid","selectedNames","length","Renew","allNames","setCheckedBoxes","setSelectAll","refetch","data","getterString","checkedOtherOwner","useEditable","state","actions","editing","txHash","pending","confirmed","startEditing","stopEditing","startPending","setConfirmed","years","setYears","useQuery","GET_ETH_PRICE","ethUsdPrice","getEthPrice","ethUsdPriceLoading","loading","duration","calculateDuration","labelsToRenew","map","name","split","GET_RENT_PRICES","variables","labels","getRentPrices","loadingRentPrices","useMutation","RENEW_DOMAINS","onCompleted","res","Object","values","trackReferral","transactionId","type","price","EthVal","_hex","toEth","mul","toFixed","mutation","PendingTx","onConfirmed","refetchTilUpdated","initial","opacity","height","animate","exit","SaveCancel","mutationButton","confirm","extraDataComponent","count"],"sourceRoot":""}