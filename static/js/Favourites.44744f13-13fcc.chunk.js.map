{"version":3,"file":"static/js/Favourites.44744f13-13fcc.chunk.js","mappings":"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","sources":["components/Icons/LargeHeart.js","routes/Favourites.js","../node_modules/@apollo/src/react/components/Query.tsx"],"sourcesContent":["import React from 'react'\nimport styled from '@emotion/styled/macro'\n\nconst LargeHeartContainer = styled('svg')``\n\nconst LargeHeart = () => (\n  <LargeHeartContainer\n    width=\"42\"\n    height=\"41\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <path\n      d=\"M17.857 4.453C14.284.518 8.553.518 4.98 4.453l-.336.37C.452 9.44.452 16.984 4.642 21.598l16.16 17.8c.124.135.27.135.393-.001l16.16-17.799c4.194-4.617 4.193-12.156-.002-16.777l-.336-.37c-3.574-3.936-9.3-3.936-12.876 0l-1.373 1.512a2.372 2.372 0 0 1-3.538 0l-1.373-1.511z\"\n      stroke=\"#E7E7E7\"\n      strokeWidth=\"3\"\n      fill=\"none\"\n      fillRule=\"evenodd\"\n      opacity=\".7\"\n    />\n  </LargeHeartContainer>\n)\n\nexport default LargeHeart\n","import React, { useEffect, useState } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport styled from '@emotion/styled/macro'\nimport { Query } from '@apollo/client/react/components'\nimport DomainItem from '../components/DomainItem/DomainItem'\nimport { getNamehash } from '@evmosdomains/ui'\nimport { useQuery } from '@apollo/client'\nimport { gql } from '@apollo/client'\n\nimport {\n  GET_FAVOURITES,\n  GET_SUBDOMAIN_FAVOURITES,\n  GET_OWNER,\n  GET_REGISTRATIONS_BY_IDS_SUBGRAPH,\n  GET_ERRORS\n} from '../graphql/queries'\n\nimport mq from 'mediaQuery'\nimport moment from 'moment'\n\nimport { H2 as DefaultH2 } from '../components/Typography/Basic'\nimport LargeHeart from '../components/Icons/LargeHeart'\nimport RenewAll from '../components/Address/RenewAll'\nimport Checkbox from '../components/Forms/Checkbox'\nimport { useAccount } from '../components/QueryAccount'\nimport { filterNormalised, normaliseOrMark } from '../utils/utils'\nimport {\n  NonMainPageBannerContainer,\n  DAOBannerContent\n} from '../components/Banner/DAOBanner'\nimport { InvalidCharacterError } from '../components/Error/Errors'\n\nconst SelectAll = styled('div')`\n  grid-area: selectall;\n  display: flex;\n  justify-content: flex-end;\n  padding-right: 40px;\n  margin: 2em 0;\n`\n\nconst NoDomainsContainer = styled('div')`\n  display: flex;\n  padding: 40px;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  background: white;\n  box-shadow: 3px 4px 6px 0 rgba(229, 236, 241, 0.3);\n  border-radius: 6px;\n  margin-bottom: 40px;\n\n  h2 {\n    color: #adbbcd;\n    font-weight: 100;\n    margin-bottom: 0;\n    padding: 0;\n    margin-top: 20px;\n    text-align: center;\n    max-width: 500px;\n  }\n\n  p {\n    color: #2b2b2b;\n    font-size: 18px;\n    font-weight: 300;\n    margin-top: 20px;\n    line-height: 1.3em;\n    text-align: center;\n    max-width: 400px;\n  }\n`\n\nconst H2 = styled(DefaultH2)`\n  margin-top: 50px;\n  margin-left: 20px;\n  ${mq.medium`\n    margin-left: 0;\n  `}\n`\n\nconst NoDomains = () => {\n  const { t } = useTranslation()\n  return (\n    <NoDomainsContainer>\n      <LargeHeart />\n      <h2>{t('favourites.nofavouritesDomains.title')}</h2>\n      <p>{t('favourites.nofavouritesDomains.text')}</p>\n    </NoDomainsContainer>\n  )\n}\n\nfunction getAvailable(expiryDate) {\n  let e = moment(parseInt(expiryDate * 1000))\n  let e2 = moment().subtract(90, 'days')\n  return e2.diff(e) > 0\n}\n\nfunction getDomainState(owner, available) {\n  if (!owner || available) return 'Open'\n  return parseInt(owner, 16) === 0 ? 'Open' : 'Owned'\n}\n\nconst RESET_STATE_QUERY = gql`\n  query resetStateQuery @client {\n    networkId\n  }\n`\nexport const useResetState = (setYears, setCheckedBoxes, setSelectAll) => {\n  const {\n    data: { networkId }\n  } = useQuery(RESET_STATE_QUERY)\n  useEffect(() => {\n    setYears(1)\n    setCheckedBoxes({})\n    setSelectAll(null)\n  }, [networkId])\n}\n\nfunction Favourites() {\n  const { t } = useTranslation()\n  useEffect(() => {\n    document.title = 'Evmos Domains Favourites'\n  }, [])\n\n  let [years, setYears] = useState(1)\n  let [checkedBoxes, setCheckedBoxes] = useState({})\n  const [selectAll, setSelectAll] = useState(false)\n  const account = useAccount()\n\n  useResetState(setYears, setCheckedBoxes, setSelectAll)\n\n  const { data: { favourites: favouritesWithUnnormalised } = [] } = useQuery(\n    GET_FAVOURITES\n  )\n  useEffect(() => {\n    document.title = 'Evmos Domains Favourites'\n  }, [])\n\n  const { data: { subDomainFavourites } = [] } = useQuery(\n    GET_SUBDOMAIN_FAVOURITES\n  )\n  const {\n    data: { globalError }\n  } = useQuery(GET_ERRORS)\n  const favourites = normaliseOrMark(favouritesWithUnnormalised, 'name')\n  if (globalError.invalidCharacter || !favourites) {\n    return <InvalidCharacterError message={globalError.invalidCharacter} />\n  }\n  const ids =\n    favourites &&\n    favourites\n      .map(f => {\n        try {\n          return getNamehash(f.name)\n        } catch (e) {\n          console.error('Error getting favourite ids: ', e)\n          return null\n        }\n      })\n      ?.filter(x => x)\n\n  const { data: { registrations } = [], refetch } = useQuery(\n    GET_REGISTRATIONS_BY_IDS_SUBGRAPH,\n    {\n      variables: { ids },\n      fetchPolicy: 'no-cache',\n      nextFetchPolicy: 'no-cache',\n      context: {\n        queryDeduplication: false\n      }\n    }\n  )\n\n  if (!favourites || (favourites.length === 0 && !registrations)) {\n    return <NoDomains />\n  }\n  let favouritesList = []\n\n  if (favourites.length > 0) {\n    if (registrations && registrations.length > 0) {\n      favouritesList = favourites.map(f => {\n        try {\n          let r = registrations.filter(\n            a => a.domain.id === getNamehash(f.name)\n          )[0]\n          return {\n            name: f.name,\n            owner: r && r.registrant.id,\n            available: getAvailable(r && r.expiryDate),\n            expiryDate: r && r.expiryDate,\n            hasInvalidCharacter: f.hasInvalidCharacter\n          }\n        } catch (e) {\n          return {\n            name: f.name,\n            hasInvalidCharacter: true,\n            available: false,\n            expiryDate: false\n          }\n        }\n      })\n    } else {\n      // Fallback when subgraph is not returning result\n      favouritesList = favourites.map(f => {\n        return {\n          name: f.name,\n          hasInvalidCharacter: f.hasInvalidCharacter\n        }\n      })\n    }\n  }\n\n  const hasFavourites =\n    (favouritesList && favouritesList.length > 0) ||\n    (subDomainFavourites && subDomainFavourites.length > 0)\n  if (!hasFavourites) {\n    return (\n      <FavouritesContainer data-testid=\"favourites-container\">\n        <H2>{t('favourites.favouriteTitle')}</H2>\n        <NoDomains>\n          <LargeHeart />\n          <h2>{t('favourites.nofavouritesDomains.title')}</h2>\n          <p>{t('favourites.nofavouritesDomains.text')}</p>\n        </NoDomains>\n      </FavouritesContainer>\n    )\n  }\n\n  const selectedNames = Object.entries(checkedBoxes)\n    .filter(([key, value]) => value)\n    .map(([key]) => key)\n\n  const allNames = favouritesList.map(f => f.name)\n  const selectAllNames = () => {\n    const obj = favouritesList.reduce((acc, f) => {\n      if (f.expiryDate) {\n        acc[f.name] = true\n      }\n      return acc\n    }, {})\n    setCheckedBoxes(obj)\n  }\n  let data = []\n  const checkedOtherOwner =\n    favouritesList.filter(\n      f =>\n        f.expiryDate &&\n        f.owner !== account?.toLowerCase() &&\n        checkedBoxes[f.name]\n    ).length > 0\n  const canRenew = favouritesList.filter(f => f.expiryDate).length > 0\n  return (\n    <FavouritesContainer data-testid=\"favourites-container\">\n      <NonMainPageBannerContainer>\n        <DAOBannerContent />\n      </NonMainPageBannerContainer>\n      <H2>{t('favourites.favouriteTitle')}</H2>\n      {canRenew && (\n        <>\n          <RenewAll\n            years={years}\n            setYears={setYears}\n            selectedNames={selectedNames}\n            setCheckedBoxes={setCheckedBoxes}\n            setSelectAll={setSelectAll}\n            allNames={allNames}\n            refetch={refetch}\n            data={data}\n            getterString=\"registrations\"\n            checkedOtherOwner={checkedOtherOwner}\n          />\n          <SelectAll>\n            <Checkbox\n              testid=\"checkbox-renewall\"\n              type=\"double\"\n              checked={selectAll}\n              onClick={() => {\n                if (!selectAll) {\n                  selectAllNames()\n                } else {\n                  setCheckedBoxes({})\n                }\n                setSelectAll(selectAll => !selectAll)\n              }}\n            />\n          </SelectAll>\n        </>\n      )}\n\n      {favouritesList &&\n        favouritesList.map(domain => {\n          return (\n            <DomainItem\n              domain={{\n                ...domain,\n                state: getDomainState(domain.owner, domain.available),\n                owner: domain.owner\n              }}\n              isFavourite={true}\n              checkedBoxes={checkedBoxes}\n              setCheckedBoxes={setCheckedBoxes}\n              setSelectAll={setSelectAll}\n              key={domain.name}\n              hasInvalidCharacter={domain.hasInvalidCharacter}\n            />\n          )\n        })}\n      {subDomainFavourites &&\n        subDomainFavourites.map(domain => (\n          <Query\n            query={GET_OWNER}\n            variables={{ name: domain.name }}\n            key={domain.name}\n          >\n            {({ loading, error, data }) => {\n              if (error)\n                return <div>{(console.log(error), JSON.stringify(error))}</div>\n              return (\n                <DomainItem\n                  loading={loading}\n                  domain={{\n                    ...domain,\n                    state: getDomainState(data?.getOwner, false),\n                    owner: data?.getOwner\n                  }}\n                  isSubDomain={true}\n                  isFavourite={true}\n                />\n              )\n            }}\n          </Query>\n        ))}\n    </FavouritesContainer>\n  )\n}\n\nconst FavouritesContainer = styled('div')`\n  padding-bottom: 60px;\n`\n\nexport default Favourites\n","import * as PropTypes from 'prop-types';\n\nimport { OperationVariables } from '../../core';\nimport { QueryComponentOptions } from './types';\nimport { useQuery } from '../hooks';\n\nexport function Query<TData = any, TVariables = OperationVariables>(\n  props: QueryComponentOptions<TData, TVariables>\n) {\n  const { children, query, ...options } = props;\n  const result = useQuery(query, options);\n  return result ? children(result) : null;\n}\n\nexport interface Query<TData, TVariables> {\n  propTypes: PropTypes.InferProps<QueryComponentOptions<TData, TVariables>>;\n}\n\nQuery.propTypes = {\n  client: PropTypes.object,\n  children: PropTypes.func.isRequired,\n  fetchPolicy: PropTypes.string,\n  notifyOnNetworkStatusChange: PropTypes.bool,\n  onCompleted: PropTypes.func,\n  onError: PropTypes.func,\n  pollInterval: PropTypes.number,\n  query: PropTypes.object.isRequired,\n  variables: PropTypes.object,\n  ssr: PropTypes.bool,\n  partialRefetch: PropTypes.bool,\n  returnPartialData: PropTypes.bool\n} as Query<any, any>[\"propTypes\"];\n"],"names":["LargeHeartContainer","width","height","xmlns","d","stroke","strokeWidth","fill","fillRule","opacity","SelectAll","NoDomainsContainer","H2","DefaultH2","mq","NoDomains","t","useTranslation","getAvailable","expiryDate","e","moment","parseInt","subtract","diff","getDomainState","owner","available","RESET_STATE_QUERY","gql","useResetState","setYears","setCheckedBoxes","setSelectAll","networkId","useQuery","data","useEffect","FavouritesContainer","document","title","useState","years","checkedBoxes","selectAll","account","useAccount","GET_FAVOURITES","favouritesWithUnnormalised","favourites","GET_SUBDOMAIN_FAVOURITES","subDomainFavourites","globalError","GET_ERRORS","normaliseOrMark","invalidCharacter","message","ids","map","f","getNamehash","name","console","error","filter","x","GET_REGISTRATIONS_BY_IDS_SUBGRAPH","variables","fetchPolicy","nextFetchPolicy","context","queryDeduplication","registrations","refetch","length","favouritesList","r","a","domain","id","registrant","hasInvalidCharacter","selectedNames","Object","entries","allNames","checkedOtherOwner","toLowerCase","canRenew","DAOBanner","RenewAll","getterString","Checkbox","testid","type","checked","onClick","obj","reduce","acc","selectAllNames","DomainItem","state","isFavourite","Query","query","GET_OWNER","loading","log","JSON","stringify","getOwner","isSubDomain","props","children","options","result","propTypes","client","PropTypes","notifyOnNetworkStatusChange","onCompleted","onError","pollInterval","ssr","partialRefetch","returnPartialData"],"sourceRoot":""}