{"version":3,"file":"static/js/SearchResults.4e7ffa10-1a1bc.chunk.js","mappings":"sSAkBMA,EAAsB,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,WAAYC,EAAiB,EAAjBA,WACzC,GAGIC,EAAAA,EAAAA,GAASC,EAAAA,GAAgB,CAC3BC,KAAMH,IAHEI,EADV,EACEC,KAAQD,WACRE,EAFF,EAEEA,QAKF,OACE,SAAC,IAAD,CACEA,QAASA,EACTC,OAAQR,EACRS,YACET,GACAK,GACAA,EAAWK,QAAO,SAAAF,GAAM,OAAIA,EAAOJ,OAASJ,EAAWI,QAAMO,OAAS,KAuB9E,EAjB4B,SAAC,GAAoB,IAAlBV,EAAiB,EAAjBA,WAC7B,GAAiCC,EAAAA,EAAAA,GAASU,EAAAA,GAAiB,CACzDC,UAAW,CACTT,KAAMH,KAFFK,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QAASO,EAAvB,EAAuBA,MAMvB,GAAIP,IAAYD,EAAM,OAAO,KAC7B,GAAIQ,EAEF,OADAC,QAAQD,MAAMA,GACP,KAET,IAAQd,EAAeM,EAAfN,WAER,OAAO,SAACD,EAAD,CAA2BC,WAAAA,EAAYC,WAAAA,K,2CC1C1Ce,GAAoBC,EAAAA,EAAAA,IAAH,oFA4FvB,EA3CyB,SAAC,GAA4B,EAA1BC,aAA2B,IAAbC,EAAY,EAAZA,MAE9BC,GACNlB,EAAAA,EAAAA,GAASc,GADXV,KAAQc,WAEJnB,EAAakB,EAAME,OAAOpB,WAC1BqB,GAAUC,EAAAA,EAAAA,MACVC,EAAUvB,EAAWwB,cACvBH,GAAWE,IAAYvB,GACzBqB,EAAQI,KAAR,kBAAwBF,IAG1B,MAjDuB,SAACG,EAAaP,GACrC,OAA4BQ,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAA4BF,EAAAA,EAAAA,UAAS,MAArC,eAAOG,EAAP,KAAeC,EAAf,KAiCA,OA/BAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAa,mCAAG,+FAEpBJ,EAAU,IAGR7B,EADoC,IAAlC0B,EAAYQ,MAAM,KAAKxB,OACZgB,EAAc,SAEdA,EAPK,UAUDS,EAAAA,EAAAA,IAAgBnC,GAVf,OAUdoC,EAVc,OAWf,CAAC,cAAe,UAAW,SAASC,SAASD,KAChDE,GAAUC,EAAAA,EAAAA,IAAavC,GACvB+B,EAAUO,IAEZE,SAASC,MAAT,gCAA0CzC,GAE7B,gBAAToC,EACFP,EAAU,CAAC,gBACO,UAATO,EACTP,EAAU,CAAC,aACO,YAATO,GACTP,EAAU,CAAC,oBAtBO,2CAAH,qDAyBfV,GACFc,MAED,CAACP,EAAaP,IAEV,CAAES,OAAAA,EAAQE,OAAAA,GAcUY,CAAiB1C,EAAYmB,GAAhDS,EAAR,EAAQA,OAAQE,EAAhB,EAAgBA,OAEhB,OAAKX,EAIa,aAAdS,EAAO,IAEP,+BACE,SAACe,EAAA,EAAD,CAAcf,OAAQA,EAAQ5B,WAAYA,MAGrC4B,EAAOlB,OAAS,GAClB,SAACiC,EAAA,EAAD,CAAcf,OAAQA,EAAQ5B,WAAYA,IAE/C8B,GAEA,iCACE,SAAC,IAAD,WACE,SAACc,EAAA,GAAD,OAEF,SAAC,EAAAC,GAAD,WACE,SAACC,EAAA,EAAD,CAAOC,QAAQ,0BAAf,sBAEF,SAAC,EAAD,CAAY/C,WAAY8B,OAIrB,IAzBA","sources":["components/SearchName/DomainInfo.js","routes/SearchResults.js"],"sourcesContent":["import React from 'react'\nimport { Query } from '@apollo/client/react/components'\nimport { useQuery } from '@apollo/client'\nimport DomainItem from '../DomainItem/DomainItem'\nimport { GET_FAVOURITES, GET_SINGLE_NAME } from '../../graphql/queries'\n\nexport const DomainInfo = ({ domainState, isFavourite, loading }) => {\n  return (\n    <DomainItem\n      loading={loading}\n      domain={domainState}\n      isFavourite={isFavourite}\n    />\n  )\n}\n\n//TODO: create a file for shared client queries\n\nconst DomainItemContainer = ({ singleName, searchTerm }) => {\n  const {\n    data: { favourites },\n    loading\n  } = useQuery(GET_FAVOURITES, {\n    name: searchTerm\n  })\n\n  return (\n    <DomainItem\n      loading={loading}\n      domain={singleName}\n      isFavourite={\n        singleName &&\n        favourites &&\n        favourites.filter(domain => domain.name === singleName.name).length > 0\n      }\n    />\n  )\n}\n\nconst DomainInfoContainer = ({ searchTerm }) => {\n  const { data, loading, error } = useQuery(GET_SINGLE_NAME, {\n    variables: {\n      name: searchTerm\n    }\n  })\n\n  if (loading || !data) return null\n  if (error) {\n    console.error(error)\n    return null\n  }\n  const { singleName } = data\n\n  return <DomainItemContainer {...{ singleName, searchTerm }} />\n}\n\nexport default DomainInfoContainer\n","import React, { useState, useEffect } from 'react'\nimport { useQuery } from '@apollo/client'\nimport { gql } from '@apollo/client'\nimport { Trans } from 'react-i18next'\n\nimport { H2 } from '../components/Typography/Basic'\nimport DomainInfo from '../components/SearchName/DomainInfo'\nimport { validateName, parseSearchTerm } from '../utils/utils'\nimport SearchErrors from '../components/SearchErrors/SearchErrors'\nimport { useHistory } from 'react-router-dom'\n\nconst RESULTS_CONTAINER = gql`\n  query getResultsContainer {\n    isENSReady @client\n  }\n`\n\nimport {\n  NonMainPageBannerContainer,\n  DAOBannerContent\n} from '../components/Banner/DAOBanner'\n\nconst useCheckValidity = (_searchTerm, isENSReady) => {\n  const [errors, setErrors] = useState([])\n  const [parsed, setParsed] = useState(null)\n\n  useEffect(() => {\n    const checkValidity = async () => {\n      let _parsed, searchTerm\n      setErrors([])\n\n      if (_searchTerm.split('.').length === 1) {\n        searchTerm = _searchTerm + '.evmos' // changed to evmos\n      } else {\n        searchTerm = _searchTerm\n      }\n\n      const type = await parseSearchTerm(searchTerm)\n      if (!['unsupported', 'invalid', 'short'].includes(type)) {\n        _parsed = validateName(searchTerm)\n        setParsed(_parsed)\n      }\n      document.title = `Evmos Domains Search: ${searchTerm}`\n\n      if (type === 'unsupported') {\n        setErrors(['unsupported'])\n      } else if (type === 'short') {\n        setErrors(['tooShort'])\n      } else if (type === 'invalid') {\n        setErrors(['domainMalformed'])\n      }\n    }\n    if (isENSReady) {\n      checkValidity()\n    }\n  }, [_searchTerm, isENSReady])\n\n  return { errors, parsed }\n}\n\nconst ResultsContainer = ({ searchDomain, match }) => {\n  const {\n    data: { isENSReady }\n  } = useQuery(RESULTS_CONTAINER)\n  const searchTerm = match.params.searchTerm\n  const history = useHistory()\n  const lowered = searchTerm.toLowerCase()\n  if (history && lowered !== searchTerm) {\n    history.push(`/search/${lowered}`)\n  }\n\n  const { errors, parsed } = useCheckValidity(searchTerm, isENSReady)\n\n  if (!isENSReady) {\n    return <div>Loading</div>\n  }\n\n  if (errors[0] === 'tooShort') {\n    return (\n      <>\n        <SearchErrors errors={errors} searchTerm={searchTerm} />\n      </>\n    )\n  } else if (errors.length > 0) {\n    return <SearchErrors errors={errors} searchTerm={searchTerm} />\n  }\n  if (parsed) {\n    return (\n      <>\n        <NonMainPageBannerContainer>\n          <DAOBannerContent />\n        </NonMainPageBannerContainer>\n        <H2>\n          <Trans i18nKey=\"singleName.search.title\">Names</Trans>\n        </H2>\n        <DomainInfo searchTerm={parsed} />\n      </>\n    )\n  } else {\n    return ''\n  }\n}\n\nexport default ResultsContainer\n"],"names":["DomainItemContainer","singleName","searchTerm","useQuery","GET_FAVOURITES","name","favourites","data","loading","domain","isFavourite","filter","length","GET_SINGLE_NAME","variables","error","console","RESULTS_CONTAINER","gql","searchDomain","match","isENSReady","params","history","useHistory","lowered","toLowerCase","push","_searchTerm","useState","errors","setErrors","parsed","setParsed","useEffect","checkValidity","split","parseSearchTerm","type","includes","_parsed","validateName","document","title","useCheckValidity","SearchErrors","DAOBanner","H2","Trans","i18nKey"],"sourceRoot":""}